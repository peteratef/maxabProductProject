{"ast":null,"code":"import _objectSpread from \"D:\\\\projects\\\\react\\\\tasks\\\\maxabProducts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"D:\\\\projects\\\\react\\\\tasks\\\\maxabProducts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"D:\\\\projects\\\\react\\\\tasks\\\\maxabProducts\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\projects\\\\react\\\\tasks\\\\maxabProducts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { ADD_PRODUCT, DELETE_PRODUCT, EDIT_PRODUCT, CHANGE_FILTER, ON_INIT_FUNCTION, ACTIVATE_DEACTIVATE, ACTIVATE_DEACTIVATE_FILTER } from \"./action-types/product-actions\"; //add cart action\n\nexport var initFunction = function initFunction() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                dispatch({\n                  type: ON_INIT_FUNCTION\n                });\n\n              case 1:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var changeFilter = function changeFilter(value, selectedValue) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch, getState) {\n        var state, filteredProducts;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                state = getState();\n                filteredProducts = [];\n                console.log(state.fitlteredItems, \"filtered items itemsss\");\n                console.log(state.items, \"itemsss\");\n\n                if (value.length > 0 || selectedValue.length > 0) {\n                  filteredProducts = state.items.filter(function (each) {\n                    if (selectedValue !== \"select_activation\") {\n                      return (each.nameEng.includes(value) || each.nameArb.includes(value)) && each.activation === selectedValue;\n                    } else {\n                      return each.nameEng.includes(value) || each.nameArb.includes(value);\n                    }\n                  });\n                } else {\n                  filteredProducts = state.items;\n                }\n\n                console.log(filteredProducts, \"filteredProduct\");\n                dispatch({\n                  type: CHANGE_FILTER,\n                  filteredProducts: filteredProducts\n                });\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}; /////////////delete item (product)///////\n\nexport var deleteProduct = function deleteProduct(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch, getState) {\n        var state, new_items;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                state = getState();\n                new_items = state.items.filter(function (item) {\n                  return id !== item.id;\n                });\n                dispatch({\n                  type: DELETE_PRODUCT,\n                  items: new_items\n                });\n\n              case 3:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      return function (_x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n}; //// activate deactivate function ////\n\nexport var activateDeactivate = function activateDeactivate(id, status) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch, getState) {\n        var state, index, statusValue, items, fitlteredItems, _index, _statusValue, _items;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                state = getState();\n\n                if (state.fitlteredItems.length > 0 && state.fitlteredItems !== state.items) {\n                  // console.log(\"i am here i am hree\");\n                  index = state.fitlteredItems.findIndex(function (item) {\n                    return item.id === parseInt(id);\n                  });\n                  statusValue = null;\n\n                  if (status === \"true\") {\n                    statusValue = \"false\";\n                  } else {\n                    statusValue = \"true\";\n                  }\n\n                  console.log(statusValue, \"statusValue\");\n                  items = _toConsumableArray(state.items); // important to create a copy, otherwise you'll modify state outside of setState call\n\n                  items[index] = _objectSpread({}, items[index], {\n                    activation: statusValue\n                  });\n                  fitlteredItems = _toConsumableArray(state.fitlteredItems); // important to create a copy, otherwise you'll modify state outside of setState call\n\n                  fitlteredItems[index] = _objectSpread({}, fitlteredItems[index], {\n                    activation: statusValue\n                  });\n                  console.log(fitlteredItems, \" fitlteredItems updatedItems\");\n                  console.log(items, \"updatedItems\");\n                  dispatch({\n                    type: ACTIVATE_DEACTIVATE_FILTER,\n                    fitlteredItems: fitlteredItems,\n                    items: items\n                  });\n                } else {\n                  console.log(\"we are in the iteeems not filtered\");\n                  _index = state.items.findIndex(function (item) {\n                    return item.id === parseInt(id);\n                  });\n                  _statusValue = null;\n\n                  if (status === \"true\") {\n                    _statusValue = \"false\";\n                  } else {\n                    _statusValue = \"true\";\n                  }\n\n                  console.log(_statusValue, \"statusValue\");\n                  _items = _toConsumableArray(state.items); // important to create a copy, otherwise you'll modify state outside of setState call\n\n                  _items[_index] = _objectSpread({}, _items[_index], {\n                    activation: _statusValue\n                  });\n                  dispatch({\n                    type: ACTIVATE_DEACTIVATE,\n                    items: _items\n                  });\n                }\n\n              case 2:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      return function (_x7, _x8) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n}; ////// edit product /////\n\nexport var editProduct = function editProduct(formValues) {\n  console.log(formValues, \"formValues\");\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref5 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee5(dispatch, getState) {\n        var state, index, items;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                state = getState();\n                index = state.items.findIndex(function (item) {\n                  return item.id === parseInt(formValues.id);\n                });\n                console.log(formValues.activation, \"activationnnnn\");\n                items = _toConsumableArray(state.items); // important to create a copy, otherwise you'll modify state outside of setState call\n\n                items[index] = _objectSpread({}, items[index], {\n                  nameEng: formValues.nameEng,\n                  nameArb: formValues.nameArb,\n                  activation: formValues.activation,\n                  img: formValues.img\n                });\n                dispatch({\n                  type: EDIT_PRODUCT,\n                  items: items\n                });\n\n              case 6:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      return function (_x9, _x10) {\n        return _ref5.apply(this, arguments);\n      };\n    }()\n  );\n}; ////// ADD PRODUCT /////\n\nexport var addProduct = function addProduct(formValues) {\n  console.log(formValues, \"formValues\");\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref6 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee6(dispatch, getState) {\n        var state, updatedItems, addedItem;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                state = getState();\n                updatedItems = state.items;\n                addedItem = [{\n                  id: Math.floor(Math.random() * (999 - 100 + 1) + 100),\n                  nameEng: formValues[\"nameEng\"],\n                  nameArb: formValues[\"nameArb\"],\n                  activation: formValues[\"activation\"],\n                  img: formValues[\"img\"]\n                }]; //check if the action id exists in the addedItems\n                // updatedItems = state.items.concat(addedItem);\n\n                updatedItems = addedItem.concat(state.items);\n                dispatch({\n                  type: ADD_PRODUCT,\n                  items: updatedItems\n                });\n\n              case 5:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      return function (_x11, _x12) {\n        return _ref6.apply(this, arguments);\n      };\n    }()\n  );\n};","map":{"version":3,"sources":["D:\\projects\\react\\tasks\\maxabProducts\\src\\components\\actions\\productActions.js"],"names":["ADD_PRODUCT","DELETE_PRODUCT","EDIT_PRODUCT","CHANGE_FILTER","ON_INIT_FUNCTION","ACTIVATE_DEACTIVATE","ACTIVATE_DEACTIVATE_FILTER","initFunction","dispatch","getState","type","changeFilter","value","selectedValue","state","filteredProducts","console","log","fitlteredItems","items","length","filter","each","nameEng","includes","nameArb","activation","deleteProduct","id","new_items","item","activateDeactivate","status","index","findIndex","parseInt","statusValue","editProduct","formValues","img","addProduct","updatedItems","addedItem","Math","floor","random","concat"],"mappings":"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","sourcesContent":["import {\r\n  ADD_PRODUCT,\r\n  DELETE_PRODUCT,\r\n  EDIT_PRODUCT,\r\n  CHANGE_FILTER,\r\n  ON_INIT_FUNCTION,\r\n  ACTIVATE_DEACTIVATE,\r\n  ACTIVATE_DEACTIVATE_FILTER,\r\n} from \"./action-types/product-actions\";\r\n\r\n//add cart action\r\nexport const initFunction = () => {\r\n  return async (dispatch, getState) => {\r\n    dispatch({\r\n      type: ON_INIT_FUNCTION,\r\n    });\r\n  };\r\n};\r\nexport const changeFilter = (value, selectedValue) => {\r\n  return async (dispatch, getState) => {\r\n    const state = getState();\r\n    let filteredProducts = [];\r\n    console.log(state.fitlteredItems, \"filtered items itemsss\");\r\n    console.log(state.items, \"itemsss\");\r\n    if (value.length > 0 || selectedValue.length > 0) {\r\n      filteredProducts = state.items.filter((each) => {\r\n        if (selectedValue !== \"select_activation\") {\r\n          return (\r\n            (each.nameEng.includes(value) || each.nameArb.includes(value)) &&\r\n            each.activation === selectedValue\r\n          );\r\n        } else {\r\n          return each.nameEng.includes(value) || each.nameArb.includes(value);\r\n        }\r\n      });\r\n    } else {\r\n      filteredProducts = state.items;\r\n    }\r\n    console.log(filteredProducts, \"filteredProduct\");\r\n    dispatch({\r\n      type: CHANGE_FILTER,\r\n      filteredProducts,\r\n    });\r\n  };\r\n};\r\n/////////////delete item (product)///////\r\nexport const deleteProduct = (id) => {\r\n  return async (dispatch, getState) => {\r\n    const state = getState();\r\n    let new_items = state.items.filter((item) => id !== item.id);\r\n    dispatch({\r\n      type: DELETE_PRODUCT,\r\n      items: new_items,\r\n    });\r\n  };\r\n};\r\n\r\n//// activate deactivate function ////\r\nexport const activateDeactivate = (id, status) => {\r\n  return async (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    if (\r\n      state.fitlteredItems.length > 0 &&\r\n      state.fitlteredItems !== state.items\r\n    ) {\r\n      // console.log(\"i am here i am hree\");\r\n      const index = state.fitlteredItems.findIndex(\r\n        (item) => item.id === parseInt(id)\r\n      );\r\n      let statusValue = null;\r\n      if (status === \"true\") {\r\n        statusValue = \"false\";\r\n      } else {\r\n        statusValue = \"true\";\r\n      }\r\n      console.log(statusValue, \"statusValue\");\r\n      let items = [...state.items]; // important to create a copy, otherwise you'll modify state outside of setState call\r\n      items[index] = {\r\n        ...items[index],\r\n        activation: statusValue,\r\n      };\r\n      let fitlteredItems = [...state.fitlteredItems]; // important to create a copy, otherwise you'll modify state outside of setState call\r\n      fitlteredItems[index] = {\r\n        ...fitlteredItems[index],\r\n        activation: statusValue,\r\n      };\r\n      console.log(fitlteredItems, \" fitlteredItems updatedItems\");\r\n      console.log(items, \"updatedItems\");\r\n      dispatch({\r\n        type: ACTIVATE_DEACTIVATE_FILTER,\r\n        fitlteredItems: fitlteredItems,\r\n        items: items,\r\n      });\r\n    } else {\r\n      console.log(\"we are in the iteeems not filtered\");\r\n      const index = state.items.findIndex((item) => item.id === parseInt(id));\r\n      let statusValue = null;\r\n      if (status === \"true\") {\r\n        statusValue = \"false\";\r\n      } else {\r\n        statusValue = \"true\";\r\n      }\r\n      console.log(statusValue, \"statusValue\");\r\n      let items = [...state.items]; // important to create a copy, otherwise you'll modify state outside of setState call\r\n      items[index] = {\r\n        ...items[index],\r\n        activation: statusValue,\r\n      };\r\n      dispatch({\r\n        type: ACTIVATE_DEACTIVATE,\r\n        items: items,\r\n      });\r\n    }\r\n  };\r\n};\r\n////// edit product /////\r\n\r\nexport const editProduct = (formValues) => {\r\n  console.log(formValues, \"formValues\");\r\n  return async (dispatch, getState) => {\r\n    const state = getState();\r\n\r\n    const index = state.items.findIndex(\r\n      (item) => item.id === parseInt(formValues.id)\r\n    );\r\n    console.log(formValues.activation, \"activationnnnn\");\r\n    let items = [...state.items]; // important to create a copy, otherwise you'll modify state outside of setState call\r\n    items[index] = {\r\n      ...items[index],\r\n      nameEng: formValues.nameEng,\r\n      nameArb: formValues.nameArb,\r\n      activation: formValues.activation,\r\n      img: formValues.img,\r\n    };\r\n    dispatch({\r\n      type: EDIT_PRODUCT,\r\n      items: items,\r\n    });\r\n  };\r\n};\r\n////// ADD PRODUCT /////\r\nexport const addProduct = (formValues) => {\r\n  console.log(formValues, \"formValues\");\r\n  return async (dispatch, getState) => {\r\n    const state = getState();\r\n    let updatedItems = state.items;\r\n    let addedItem = [\r\n      {\r\n        id: Math.floor(Math.random() * (999 - 100 + 1) + 100),\r\n        nameEng: formValues[\"nameEng\"],\r\n        nameArb: formValues[\"nameArb\"],\r\n        activation: formValues[\"activation\"],\r\n        img: formValues[\"img\"],\r\n      },\r\n    ];\r\n    //check if the action id exists in the addedItems\r\n    // updatedItems = state.items.concat(addedItem);\r\n    updatedItems = addedItem.concat(state.items);\r\n    dispatch({\r\n      type: ADD_PRODUCT,\r\n      items: updatedItems,\r\n    });\r\n  };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}